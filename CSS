1, 必须已定位的元素才能设置z-index

2, 绝对定位的元素的位置相对于'最近的已定位祖先元素'，如果元素没有已定位的祖先元素，那么它的位置相对于'最初的包含块'。

3, 如果内部DIV设置为浮动的话,外部DIV的高度不能自适应

4, 使用'font:'简写方式,至少要指定'font-size' and 'font-family'

5, 对文字设置垂直居中:line-height: 盒高度

6, 外边距合并:W3C-----外边距合并

7, 同样的z-index时,后面的覆盖前面的,即如果重叠元素的z-index的值一样,它们按照在文档中出现的顺序绘制
    注意:z-index只对兄弟元素(例如:同一容器的子元素)应用堆叠效果.如果两个元素不是兄弟元素之间的重叠,那么设置它们的z-index属性无法决定哪一个显示在最上面.相反,"必须"设置这两个重叠元素的兄弟容器的z-index属性来达到目的.
    非定位元素,总是防止重叠的方式进行布局,因此z-index属性不会应用到它们上面.尽管如此,它们默认的z-index值为0,这意味着z-index为正值的定位元素显示在常规文档流的上面,而z-index为负值的定位元素显示在常规文档流的下面.
8, position:absolute设置left为负值不会出现滚动条,设置right为负值会出现滚动条

9, 层叠样式表层叠的含义:style中的样式覆盖了样式表中的样式,并且文档的样式表中的样式覆盖了浏览器的默认样式

10, -moz- Firefox浏览器
    -webkit Chrome浏览器
    -ms- IE浏览器

11, 外边距和绝对定位的元素无关

12, 首先 width和height只制定了元素内容区域的尺寸,它不包含元素的内边距和边框所需的任何额外空间
    其次 left和top属性指定了从容器边距内侧到定位元素边框外侧的距离.这些属性不是从容器内容区域的左上角开始度量的,而是从容器内边距的左上角开始的.

13, visibility设置hidden后文档布局中扔保留空间

14, 如果将 position 设为 relative (相对定位), absolute (绝对定位) 或者 fixed (固定定位), 这样的节点会覆盖没有设置 position 属性或者属性值为 static 的节点, 说明前者比后者的默认层级高.

15, 在 z-index 属性仅在节点的 position 属性为 relative, absolute 或者 fixed 时生效.

16, 很多人将 z-index 设得很大, 9999 什么的都出来了, 如果不考虑父节点的影响, 设得再大也没用, 那是无法逾越的层级.

17, DOCTYPE 影响 CSS 处理,作为W3C的标准,一定要加 DOCTYPE声名(html5好像变了).

18, css错误解析规则:(1)未知的属性 (2)不合法的值 (3)畸形的声明 (4)不可用的@关键字 (5)样式表的意外结束 (6)字符串的意外结束

19, 如果值是0则单位可有可无 em与字体大小有关,与作用到元素上的font-size的值大小相等

20, css比较原则:a,b,c,d依次比较特殊性,从a开始,a相同则再比较b
    1,如果 HTML 标签的 'style' 属性中该样式存在，则记 a 为 1；
    2,数一下选择器中 ID 选择器的个数作为 b 的值，比如，以上的 '#c1' 和 '#c2'都算；
    3,其他属性 以及 伪类（pseudo-classes）的总数量是 c 的值，比如，上面例子中的'.con'，':hover'等；
    4,元素名和伪元素的数量是 d 的值；比如上面例子中的 ‘div’。
    example:
    <style type="text/css">
    div {                 
        width: 100px;
        height: 100px;
    }
 
    #c1 #c2 div.con {     /* a=0 b=2 c=1 d=1 -> specificity = 0,2,1,1 */
        background-color: yellow;
    }
 
    div {                 /* a=0 b=0 c=0 d=1 -> specificity = 0,0,0,1 */
        background-color: black;
    }
 
    #c2 div {             /* a=0 b=1 c=0 d=1 -> specificity = 0,1,0,1 */
        background-color: blue;
    }
 
    #c2 #content {        /* a=0 b=2 c=0 d=0 -> specificity = 0,2,0,0 */
        background-color: red;
    }
    </style>
    <div id="c1">
        <div id="c2">
            <div id="content" class="con"></div>
        </div>
    </div>
    ‘#c1 #c2 div.con ’的特殊性最高，是[0,2,1,1]，那么背景色应该是黄色才对。打开浏览器测试一下，发现，果然是黄色

21, Progressive Enhancement:从内容花生开始，将其标记为富含语义的 (X)HTML. 接着给内容裹上一层富含奶油的CSS. 最后，添加JavaScript作为糖果硬壳，这就做成了一颗可口无比的美味（并使得它不会在你手里融化）
    老外真有情调...
    
22, -margin-
    有效:margin应用于非table类型的元素上,
    无效:对于行内非替换元素(例如span),垂直方向的margin不起作用
    折叠:垂直方向上的不同元素相邻的margin,在某些情况下会发生折叠现象
    
    -padding-  
    默认值为0
    应用如margin
    
    -border-
    
23, margin折叠的规则:
    1. 两个或多个毗邻的普通流中的块元素<垂直方向>上的margin会折叠
    2. 浮动元素/inline-block的元素/绝对定位元素的margin不会和垂直方向上的其他元素的margin折叠
    3. 创建了块级格式化内容的元素，不和它的子元素发生margin折叠
    4. 元素自身的margin-bottom和margin-top相邻时也会折叠
    
24, 元素的包含块不一定是这个元素的父元素
    1,如果该元素的定位（position）为 “relative” （相对定位）或者 “static”（静态定位），它的包含块由它最近的块级、单元格 （table cell）或者行内块（inline-block）祖先元素的内容框创建。
    2,如果元素是固定定位 (“position:fixed”) 元素，那么它的包含块是当前可视窗口。
    3,如果元素是绝对定位（”position: absolute”）元素，包含块由离它最近的 position 属性为 “absolute”、“relative” 或者 “fixed” 的祖先元素创建。

25, 清楚浮动的最好方法 ^_^ 
.clearfix:after {
content: ".";
display: block;
height: 0;
clear: both;
visibility: hidden;
}
/* Hides from IE-mac */
* html .clearfix {height: 1%;}
/* End hide from IE-mac */   
    
    
    
