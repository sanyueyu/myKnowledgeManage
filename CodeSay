1, scroll to top
$('.top').click(function(){
    $("html, body").animate({ scrollTop: 0 }, 600);
    return false;
});

2,  var ninja = function myNinja(){
        assert( ninja == myNinja, "This function is named two things - at once!" );
    };
    typeof myNinja == "undefined"; //myNinja isn't defined outside of the function

3, 猴子跳跃
res = {};
res.foo = function(a, b) {return a + b;}; 
var bar = res.foo; //将原生的方法再还回去 
res.foo = function(a, b) {res.foo = bar; return 100 + res.foo(a, b)}; //只在第一次执行res.end方法时调用 100 + res.foo(a, b)
res.foo(1, 2) //103
res.foo(1, 2) // 3

4, function finder(valueFun, bestFun, coll) {
    return _.reduce(coll, function(best, current) {
        var bestValue = valueFun(best);
        var currentValue = valueFun(current);
        
        return (bestValue === bestFun(bestValue, currentValue)) ? best : current;
    });
}

valueFun: to build a comparable(可比的) value
bestFun: compare two values and return the "best" value of the two
coll: an array

5, fnull
function fnull(fun) {
    var defaults = _.rest(arguments);
    console.log(defaults);
    return function() {
        var args = _.map(arguments, function(e, i) {
            return e ? e : defaults[i];
        });
        return fun.apply(null, args);
    };
}
var nums = [1, 2, 3, null, 5];
var safeMult = fnull(function(total, n){return total * n}, 1, 1);
_.reduce(nums, safeMult);
sadeMult的参数只有俩，所以要补全俩就可以

6 ,很好的检验validator模式，validator精髓就在这里
function checker() {
  var validators = _.toArray(arguments);
  return function (obj) {
    return _.reduce(validators, function(errs, check) {
      if(check(obj))
        return errs;
      else
        return _.chain(errs).push(check.message).value();
    },[]);//此处【】为回调函数的第一个默认参数
  }
}

test:
function aMap(obj) {
    return _.isObject(obj);
}

var checkCommand = checker(validator("must be a map", aMap));
checkCommand({}); //=>true
chdckCommand(42); //=> ["must be a map"]

7 把一个对象数组转化为一个对象
model = _.extend.apply null, arr

8 function isPrime( num ) {
  if ( isPrime.cache[ num ] != null )
    return isPrime.cache[ num ];
  
  var prime = num != 1; // Everything but 1 can be prime
  for ( var i = 2; i < num; i++ ) {
    if ( num % i == 0 ) {
      prime = false;
      break;
    }
  }
 
  isPrime.cache[ num ] = prime
 
  return prime;
}

isPrime.cache = {};

assert( isPrime(5), "Make sure the function works, 5 is prime." );
assert( isPrime.cache[5], "Make sure the answer is cached." );

备忘模式，关键javascript的函数和对象是非常相似的

9 数组去重，非常具有借鉴意义
function delrep4() {
    var n = []

    this.sort()
    n.push(this[0])
    this.forEach(function(v) {
        if (v !== n[0])
            n.unshift(v)
    })
    return n
}
在此基础上写的数组原型去重方法：
Array.prototype.delrep = function(fun) {
        if(!fun) {
            fun = function(d) {return d;};
        }
        var newArr = [];
        this.sort(function(a, b) {
            if(fun(a) > fun(b)) {
                return true;
            } else {
                return false;
            }
        });
        newArr.push(this[0]);
        this.forEach(function(d) {
            if(fun(d) != fun(newArr[0])) {
                newArr.unshift(d);
            }
        });
        return newArr;
    };
